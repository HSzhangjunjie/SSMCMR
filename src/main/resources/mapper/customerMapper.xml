<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.test.dao.ICustomerMapper">
    <!-- id:statement的id 或者叫做sql的id-->
    <!-- parameterType:声明输入参数的类型 -->
    <!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
    <!-- #{}：输入参数的占位符，相当于jdbc的？ -->

    <!--添加客户-->
    <insert id="saveCustomer" parameterType="com.test.domain.Customer">
        INSERT INTO ssm_test1.t_customer(name,gender,telephone,address)VALUES(#{name},#{gender},#{telephone},#{address})
    </insert>

    <!--查询所有数据-->
    <select id="findAll" resultType="com.test.domain.Customer">
        SELECT * FROM ssm_test1.t_customer
    </select>

    <!--按照ID查询-->
    <select id="findById" resultType="com.test.domain.Customer" parameterType="java.lang.Integer">
        SELECT * FROM ssm_test1.t_customer WHERE id=#{value}
    </select>

    <!--更新账户信息-->
    <select id="update" parameterType="com.test.domain.Customer">
        UPDATE ssm_test1.t_customer SET name=#{name},gender=#{gender},telephone=#{telephone},address=#{address} WHERE id=#{id}
    </select>

    <!--删除数据-->
    <!--
        item表示集合中每一个元素进行迭代时的别名，
        index用于表示在迭代过程中，每次迭代到的位置，
        open表示该语句以什么开始，
        separator表示在每次进行迭代之间以什么符号作为分隔 符，
        close表示以什么结束
    -->
    <select id="delete" parameterType="Integer[]">
        DELETE FROM ssm_test1.t_customer
        <where>
            id
            <foreach collection="array" item="id" open="in (" close=")" separator=",">
                #{id}
            </foreach>
        </where>
    </select>


</mapper>